1.
class Solution {
public:
    int trailingZeroes(int n) 
    {
        int cnt=0;
        while(n>0)
        {
            cnt+=(n/5);
            n/=5;
        }
        return cnt;

    }
};

2.
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) 
    {
        ListNode *res=NULL;
        if(l1==NULL)return l2;
        if(l2==NULL)return l1;
        
        if(l1->val<=l2->val)
        {
            res=l1;
            res->next=mergeTwoLists(l1->next,l2);
        }
        else
        {
            res=l2;
            res->next=mergeTwoLists(l1,l2->next);
        }
        return res;
    }
};

3.
class Solution {
public:
    vector<int> plusOne(vector<int>& digits) 
    {
       int n=digits.size();
       int idx=n-1;
       while(digits[idx]==9)
       {
           digits[idx]=0;
           idx--;
           if(idx==-1)break;
       }
       //cout<<idx<<endl;
       if(idx==-1)
       {
           vector<int> ans;
           ans.push_back(1);
           for(int i=0;i<n;i++)ans.push_back(0);
           return ans;
       }
       digits[idx]++;
       return digits;
    }
};

4.
class Solution {
public:
    int firstUniqChar(string s) 
    {
          map<char,int> m1;
          int idx=-1;
          for(int i=0;i<s.size();i++)
              m1[s[i]]++;
          
          for(int i=0;i<s.size();i++)
          {
                if(m1[s[i]]==1)
                { 
                    idx=i;
                    break;
                }
          }
        return idx;
    }
};

5.
class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) 
    {
           priority_queue<pair<int,int>> q1;
           map<int,int> m1;
        
        
           for(int i=0;i<nums.size();i++)
           {
                m1[nums[i]]++;
           }
        
           set<int> s1;
           for(int i=0;i<nums.size();i++)
           {
               if(s1.find(nums[i])==s1.end())
               {
                   s1.insert(nums[i]);
                   q1.push({m1[nums[i]],nums[i]});
               }
           }
           
           vector<int> ans;
           int cnt=0;
           while(!q1.empty())
           {
               pair<int,int> x=q1.top();
               q1.pop();
               //cout<<x.first<<" "<<x.second<<endl;
               cnt++;
               ans.push_back(x.second);
               if(cnt==k)break;
           }
            return ans;
    }
};

6.
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) 
    {
        vector<vector<int>> ans;
        
        
        if(root==NULL)
            return ans;
        
        queue<TreeNode*> q1;
        q1.push(root);
        
        while(1)
        {
            int qs=q1.size();
            if(qs==0)
                break;
            
            vector<int> v1;
            while(qs>0)
            {
                    TreeNode *temp=q1.front();
                    q1.pop();
                
                    v1.push_back(temp->val);
                
                    if(temp->left)
                    {
                        q1.push(temp->left);
                    }
                    if(temp->right)
                    {
                        q1.push(temp->right);
                    }
                    qs--;
            }
            if(v1.size())
            {
                ans.push_back(v1);
                v1.clear();
            }
        }
        return ans;
    }
};

7.
class Solution {
public:
    int findKthLargest(vector<int>& nums, int k) 
    {
        int ans=0;
        priority_queue<int> q1;
        for(int i=0;i<nums.size();i++)
            q1.push(nums[i]);
        
        int cnt=0;
        while(!q1.empty())
        {
            int x=q1.top();
            //cout<<x<<" ";
            q1.pop();
            cnt++;
            if(cnt==k)
            {
                ans=x;
                break;
            }
        }
        return ans;
    }
};

8.
class Solution {
public:
    int findDuplicate(vector<int>& nums) 
    {
        int ans;
        sort(nums.begin(),nums.end());
        for(int i=0;i<nums.size();i++)
        {
            if(nums[i]==nums[i+1])
            {
                ans=nums[i];
                break;
            }
        }
        return ans;
    }
};


9.
class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) 
    {
        int n=nums.size();
        vector<int> left(n),right(n);
        left[0]=nums[0];
        right[n-1]=nums[n-1];
        
        for(int i=1;i<n;i++)
        left[i]=nums[i]*left[i-1];
        
        for(int i=n-2;i>=0;i--)
        right[i]=nums[i]*right[i+1];
        
       /* for(auto it:left)
            cout<<it<<" ";
        
        
        cout<<endl;
        
        
        for(auto it:right)
            cout<<it<<" ";*/
        
        
        nums[0]=right[1];
        nums[n-1]=left[n-2];
        
        for(int i=1;i<n-1;i++)
        {
            nums[i]=left[i-1]*right[i+1];    
        }
        
       // for(auto it:nums)
         //   cout<<it<<" ";
        
        return nums;
    }
};

10.
class Solution {
public:
    bool hasCycle(ListNode *head) 
    {
        if(head==NULL)return false;
        if(head->next==NULL)return false;
        
        
            ListNode *slow_p = head, *fast_p = head; 
  
    while (slow_p && fast_p && fast_p->next) 
    { 
        slow_p = slow_p->next; 
        fast_p = fast_p->next->next; 
        if (slow_p == fast_p) 
        { 
            return true; 
        } 
    } 
    return false;
    }
}